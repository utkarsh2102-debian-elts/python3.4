Index: python3.4-3.4.2/Lib/http/client.py
===================================================================
--- python3.4-3.4.2.orig/Lib/http/client.py	2020-09-29 15:35:55.492144166 +0200
+++ python3.4-3.4.2/Lib/http/client.py	2020-09-29 15:38:54.016887240 +0200
@@ -254,6 +254,9 @@
 #  _is_allowed_url_pchars_re = re.compile(r"^[/!$&'()*+,;=:@%a-zA-Z0-9._~-]+$")
 # We are more lenient for assumed real world compatibility purposes.
 
+# These characters are not allowed within HTTP method names
+# to prevent http header injection.
+_contains_disallowed_method_pchar_re = re.compile('[\x00-\x1f]')
 
 class HTTPMessage(email.message.Message):
     # XXX The only usage of this method is in
@@ -1005,6 +1008,8 @@
         else:
             raise CannotSendRequest(self.__state)
 
+        self._validate_method(method)
+
         # Save the method we use, we need it later in the response phase
         self._method = method
         if not url:
@@ -1106,6 +1111,16 @@
             ).format(matched=match.group(), host=host)
             raise InvalidURL(msg)
 
+    def _validate_method(self, method):
+        """Validate a method name for putrequest."""
+        # prevent http header injection
+        match = _contains_disallowed_method_pchar_re.search(method)
+        if match:
+            raise ValueError(
+                    "method can't contain control characters. %r "
+                    "(found at least %r)"
+                    % (method, match.group()))
+
     def putheader(self, header, *values):
         """Send a request header line to the server.
 
Index: python3.4-3.4.2/Lib/test/test_httplib.py
===================================================================
--- python3.4-3.4.2.orig/Lib/test/test_httplib.py	2020-09-29 15:35:55.492144166 +0200
+++ python3.4-3.4.2/Lib/test/test_httplib.py	2020-09-29 15:41:30.932570693 +0200
@@ -218,6 +218,28 @@
                     conn.putheader(name, value)
 
 
+class HttpMethodTests(TestCase):
+    def test_invalid_method_names(self):
+        methods = (
+            'GET\r',
+            'POST\n',
+            'PUT\n\r',
+            'POST\nValue',
+            'POST\nHOST:abc',
+            'GET\nrHost:abc\n',
+            'POST\rRemainder:\r',
+            'GET\rHOST:\n',
+            '\nPUT'
+        )
+
+        for method in methods:
+            with self.assertRaisesRegex(
+                    ValueError, "method can't contain control characters"):
+                conn = client.HTTPConnection('example.com')
+                conn.sock = FakeSocket(None)
+                conn.request(method=method, url="/")
+
+
 class BasicTest(TestCase):
     def test_status_lines(self):
         # Test HTTP status lines
@@ -1085,7 +1107,8 @@
         self.assertTrue(b'Host: destination.com' in conn.sock.data)
 
 def test_main(verbose=None):
-    support.run_unittest(HeaderTests, OfflineTest, BasicTest, TimeoutTest,
+    support.run_unittest(HeaderTests, OfflineTest, HttpMethodTests,
+                         BasicTest, TimeoutTest,
                          HTTPSTest, RequestBodyTest, SourceAddressTest,
                          HTTPResponseTest, TunnelTests)
 
Index: python3.4-3.4.2/Misc/NEWS.d/next/Security/2020-02-12-14-17-39.bpo-39603.Gt3RSg.rst
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ python3.4-3.4.2/Misc/NEWS.d/next/Security/2020-02-12-14-17-39.bpo-39603.Gt3RSg.rst	2020-09-29 15:35:55.488143970 +0200
@@ -0,0 +1,2 @@
+Prevent http header injection by rejecting control characters in
+http.client.putrequest(...).
